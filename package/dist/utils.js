"use strict";var __importDefault=this&&this.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.initEPAForJS=exports.initEPAForTS=exports.installDeps=exports.updatePackageJSON=exports.deleteAndInitGit=exports.cloneGithubRepo=void 0;const shelljs_1=__importDefault(require("shelljs")),promises_1=__importDefault(require("node:fs/promises")),logger_1=require("./logger"),dir_1=require("./dir"),types_1=require("../types");function cloneGithubRepo(a,b){shelljs_1.default.which("git")||(logger_1.logger.error("Sorry, this script requires \"git\""),shelljs_1.default.exit(1));let c=`https://github.com/${a}`;(a.startsWith("http")||a.startsWith("git@"))&&(c=a),logger_1.logger.info("Cloning into",b),0!==shelljs_1.default.exec(`git clone ${c} ${b}`).code&&(logger_1.logger.error("Cannot clone the repo"),shelljs_1.default.exit(1)),logger_1.logger.info("Repo cloned")}exports.cloneGithubRepo=cloneGithubRepo;function deleteAndInitGit(a){shelljs_1.default.cd(a),0!==shelljs_1.default.rm("-rf",".git/").code&&(logger_1.logger.error("Cannot delete \".git\" folder"),shelljs_1.default.exit(1)),logger_1.logger.info("Initializing git"),0!==shelljs_1.default.exec("git init").code&&(logger_1.logger.error("\"git init\" command failed"),shelljs_1.default.exit(1)),0!==shelljs_1.default.exec("git add .").code&&(logger_1.logger.error("\"git add\" command failed"),shelljs_1.default.exit(1)),0!==shelljs_1.default.exec("git commit -am \"Auto-commit by Freshland\"").code&&(logger_1.logger.error("\"git commit\" command failed"),shelljs_1.default.exit(1)),logger_1.logger.info("Git initialized")}exports.deleteAndInitGit=deleteAndInitGit;function updatePackageJSON(a,b,c){shelljs_1.default.cd(c),shelljs_1.default.test("-e","./package.json")?(logger_1.logger.info("Updating \"package.json\""),shelljs_1.default.ls("package.json").forEach(c=>{shelljs_1.default.sed("-i",/"name":\s*"(.*?)"/gi,`"name": "${a}"`,c),shelljs_1.default.sed("-i",/"version":\s*"(.*?)"/gi,`"version": "${b}"`,c)})):logger_1.logger.warn("File not found: package.json"),shelljs_1.default.test("-e","./package-lock.json")?(logger_1.logger.info("Updating \"package-lock.json\""),shelljs_1.default.ls("package-lock.json").forEach(c=>{shelljs_1.default.sed("-i",/"name":\s*"(.*?)"/i,`"name": "${a}"`,c),shelljs_1.default.sed("-i",/"version":\s*"(.*?)"/i,`"version": "${b}"`,c)})):logger_1.logger.warn("File not found: package-lock.json")}exports.updatePackageJSON=updatePackageJSON;function installDeps(a,b){switch(shelljs_1.default.cd(b),a){case types_1.PackageManagerEnum.npm:{if(!shelljs_1.default.which("npm"))return void logger_1.logger.error("Sorry, you need to install \"npm\" to install dependencies");logger_1.logger.info("Installing dependencies..."),0===shelljs_1.default.exec("npm install").code?logger_1.logger.info("Dependencies installed"):(logger_1.logger.error("\"npm install\" command failed"),logger_1.logger.warn("You need to install dependencies manually!"));break}case types_1.PackageManagerEnum.yarn:{if(!shelljs_1.default.which("yarn"))return void logger_1.logger.error("Sorry, you need to install \"yarn\" to install dependencies");logger_1.logger.info("Installing dependencies..."),0===shelljs_1.default.exec("yarn install").code?logger_1.logger.info("Dependencies installed"):(logger_1.logger.error("\"yarn install\" command failed"),logger_1.logger.warn("You need to install dependencies manually!"));break}case types_1.PackageManagerEnum.pnpm:{if(!shelljs_1.default.which("pnpm"))return void logger_1.logger.error("Sorry, you need to install \"pnpm\" to install dependencies");logger_1.logger.info("Installing dependencies..."),0===shelljs_1.default.exec("pnpm install").code?logger_1.logger.info("Dependencies installed"):(logger_1.logger.error("\"pnpm install\" command failed"),logger_1.logger.warn("You need to install dependencies manually!"));break}case types_1.PackageManagerEnum.bun:{if(!shelljs_1.default.which("bun"))return void logger_1.logger.error("Sorry, you need to install \"bun\" to install dependencies");logger_1.logger.info("Installing dependencies..."),0===shelljs_1.default.exec("bun install").code?logger_1.logger.info("Dependencies installed"):(logger_1.logger.error("\"bun install\" command failed"),logger_1.logger.warn("You need to install dependencies manually!"));break}default:{logger_1.logger.error("Invalid package manager"),logger_1.logger.error("You need to install dependencies manually!");break}}}exports.installDeps=installDeps;async function initEPAForTS(a){const b=await checkIfExists(a,types_1.Check.DIRECTORY),c=await checkIfExists(`${a}/package.json`,types_1.Check.FILE);b&&c?shelljs_1.default.cd(a):(logger_1.logger.error("Directory or \"package.json\" not exists. Exiting..."),shelljs_1.default.exit(1)),logger_1.logger.info("Installing E.P.A (for TypeScript)"),logger_1.logger.info("Installing packages..."),shelljs_1.default.exec("npm install -D eslint eslint-config-prettier eslint-config-airbnb-base eslint-plugin-prettier eslint-plugin-import eslint-plugin-import-resolver-typescript @typescript-eslint/eslint-plugin prettier eslint-config-airbnb-typescript @typescript-eslint/parser"),shelljs_1.default.exec("npm i --save"),logger_1.logger.info("Packages installed"),logger_1.logger.info("Creating .eslintrc.js file");const d=await promises_1.default.readFile(`${dir_1.rootDir}/templates/typescript/.eslintrc.js`,"utf8");await promises_1.default.writeFile(".eslintrc.js",d),logger_1.logger.info("Creating prettier.config.js file");const e=await promises_1.default.readFile(`${dir_1.rootDir}/templates/typescript/prettier.config.js`,"utf8");await promises_1.default.writeFile("prettier.config.js",e);const f=await promises_1.default.readFile(`${dir_1.rootDir}/templates/typescript/.eslintignore`,"utf8");await promises_1.default.writeFile(".eslintignore",f),logger_1.logger.info("Pushing \"fix\" script to package.json");const g=await promises_1.default.readFile("package.json","utf8"),h=JSON.parse(g);h.scripts={...h.scripts,fix:"eslint . --fix"},await promises_1.default.writeFile("package.json",JSON.stringify(h,void 0,2),"utf8"),logger_1.logger.warn("[IMPORTANT] To get better experience, install \"eslint\" and \"prettier\" extensions"),logger_1.logger.info("E.P.A installed and configured successfully"),logger_1.logger.info("Now you can run \"npm run fix\" command")}exports.initEPAForTS=initEPAForTS;async function initEPAForJS(a){const b=await checkIfExists(a,types_1.Check.DIRECTORY),c=await checkIfExists(`${a}/package.json`,types_1.Check.FILE);b&&c?shelljs_1.default.cd(a):(logger_1.logger.error("Directory or \"package.json\" not exists. Exiting..."),shelljs_1.default.exit(1)),logger_1.logger.info("Installing E.P.A (for JavaScript)"),logger_1.logger.info("Installing packages..."),shelljs_1.default.exec("npm install -D eslint eslint-config-prettier eslint-config-airbnb-base eslint-plugin-prettier eslint-plugin-import prettier"),shelljs_1.default.exec("npm i --save"),logger_1.logger.info("Packages installed"),logger_1.logger.info("Creating .eslintrc.js file");const d=await promises_1.default.readFile(`${dir_1.rootDir}/templates/javascript/.eslintrc.js`,"utf8");await promises_1.default.writeFile(".eslintrc.js",d),logger_1.logger.info("Creating prettier.config.js file");const e=await promises_1.default.readFile(`${dir_1.rootDir}/templates/javascript/prettier.config.js`,"utf8");await promises_1.default.writeFile("prettier.config.js",e);const f=await promises_1.default.readFile(`${dir_1.rootDir}/templates/javascript/.eslintignore`,"utf8");await promises_1.default.writeFile(".eslintignore",f),logger_1.logger.info("Pushing \"fix\" script to package.json");const g=await promises_1.default.readFile("package.json","utf8"),h=JSON.parse(g);h.scripts={...h.scripts,fix:"eslint . --fix"},await promises_1.default.writeFile("package.json",JSON.stringify(h,void 0,2),"utf8"),logger_1.logger.warn("[IMPORTANT] To get better experience, install \"eslint\" and \"prettier\" extensions"),logger_1.logger.info("E.P.A installed and configured successfully"),logger_1.logger.info("Now you can run \"npm run fix\" command")}exports.initEPAForJS=initEPAForJS;async function checkIfExists(a,b){try{const c=await promises_1.default.stat(a);return b===types_1.Check.DIRECTORY?c.isDirectory():!(b!==types_1.Check.FILE)&&c.isFile()}catch(a){return"ENOENT"!==a.code&&!1}}